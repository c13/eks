nameOverride: ""
namespaceOverride: ""

global:
  rbac:
    create: true
    createAggregateClusterRoles: true

## Configuration for alertmanager
## ref: https://prometheus.io/docs/alerting/alertmanager/
##
alertmanager:
  templateFiles:  
    template_1.tmpl: |-  
        {{ define "slack.zetarin.text" }}
        {{- $root := . -}}
        {{ range .Alerts }}
          *Description:* {{ .Annotations.description }}
          *Environment:* {{ .Labels.env }}
          *Severity:* {{ .Labels.severity }}
          *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:>
          *Runbook:* <{{ .Annotations.runbook }}|:spiral_note_pad:>
          *Details:*
            {{ range .Labels.SortedPairs }} - *{{ .Name }}:* `{{ .Value }}`
            {{ end }}
        {{ end }}
        {{ end }}

  ## Deploy alertmanager
  ##
  enabled: true

  podDisruptionBudget:
    enabled: true
    minAvailable: 1
    maxUnavailable: ""

  config:
    global:
      slack_api_url: https://hooks.slack.com/services/
    route:
      routes:
      - receiver: 'null'
        matchers:
          - alertname =~ "InfoInhibitor|Watchdog"
      - receiver: 'null'
        matchers:
          - namespace =~ "testing"
      - receiver: 'slack-alerts'
        matchers:
          - env = "zetarin"
      - receiver: 'slack-alerts'
    receivers:
    - name: 'null'
    - name: 'slack-alerts'
      slack_configs:
      - channel: '#alerts'
        send_resolved: true
        title: "{{ .CommonAnnotations.summary }}"
        text: '{{ template "slack.zetarin.text" . }}'
    - name: 'slack-infrastructure-alerts'
      slack_configs:
      - channel: '#infra-alerts'
        send_resolved: true
    templates:
    - '/etc/alertmanager/config/*.tmpl'

  ingress:
    enabled: false
    ingressClassName: nginx
    hosts:
      - alertmanager-eks.zetarin.org
    paths:
      - /

    pathType: ImplementationSpecific

  alertmanagerSpec:
    alertmanagerConfigNamespaceSelector:
      matchLabels:
        alertmanagerconfig: enabled
    replicas: 2
    resources:
      requests:
       memory: 400Mi

grafana:
  enabled: true
  assertNoLeakedSecrets: false
  adminPassword: FHkjgdfs2342lk

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: alb
      external-dns.alpha.kubernetes.io/hostname: grafana-eks.zetarin.org
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-2016-08
    hosts:
      - grafana-eks.zetarin.org
    path: /

  ### Google OAuth
  grafana.ini:
    server:
      root_url: "https://grafana-eks.zetarin.org/"
    users:
      auto_assign_org_id: 1
      #home_page: "/"
      #viewers_can_edit: "true"

  persistence:
    type: pvc
    enabled: true

kubeControllerManager:
  enabled: false

## Deploy a Prometheus instance
##
prometheus:
  enabled: true

  podDisruptionBudget:
    enabled: true
    minAvailable: 1
    maxUnavailable: ""

  ingress:
    enabled: false
    ingressClassName: nginx
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    ruleSelector: {}

    replicas: 2
    resources:
      requests:
        memory: 400Mi
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: standard-rwo
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 20Gi